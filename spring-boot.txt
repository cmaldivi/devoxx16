https://speakerdeck.com/snicoll/spring-boot-1-dot-3-pour-le-web

https://github.com/snicoll-demos/spring-boot-4tw-uni

NB: @Configuration pour mettre les confs placées dans main dans des classes dédiées

Tips

exception: 

@ResponseStatus(HttpStatus.BAD_REQUEST)
=> annoter une exception avec cela pour que spring renvoie automatiquement ce statut sur la levÃe de l'exception

Configurer la page d'erreur: voir http://www.sporcic.org/2014/05/custom-error-pages-with-spring-boot/

@Bean
public EmbeddedServletContainerCustomizer containerCustomizer() {
 
    return (container -> {
	ErrorPage error401Page = new ErrorPage(HttpStatus.UNAUTHORIZED, "/401.html");
	ErrorPage error404Page = new ErrorPage(HttpStatus.NOT_FOUND, "/404.html");
	ErrorPage error500Page = new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, "/500.html");
			     
	container.addErrorPages(error401Page, error404Page, error500Page);
   });
}


"Resources handling"
Pour réécrire les url dans les templates (numÃ©ro de version des .js par exemple), on peut utiliser webjars-locator dans les dÃpendances, pour mustache par exemple (thymeleaf dÃ©ja ok)


Actuator

https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html

ajoute des api pour observer l'appli
/env : variables d'env + config spring (par exemple cache thymeleaf end mode dev désactivé)
/trace : dernières requêtes
/mappings : config des controllers, tous les endpoints
/dump : dump tout
/health : par exemple montre l'espace disque, etc
/info : info de build (autoconfigurer les propriétés dans l'outil de build)

dans les propriétés par exemple:
info.name = "Spring demo"
info.version = "1"


Voir https://www.jayway.com/2014/07/22/spring-boot-custom-healthindicator/

Dans main pour avoir un truc custom:

@Bean
public HealthIndicator forTheWebHealthIndicator() {

}



Cache:

Ajout de @Cacheable("diffs") sur une méthode
=> calcul d'une clé sur les paramètres de la méthode
=> mise en cache clé / valeur

+ ajout de @EnableCaching sur la classe Application

http://www.captaindebug.com/2012/09/spring-31-caching-and-cacheable.html#.Vxd4HXAZCUg

dépendance pour gérer le cache : ehcache
ajouter deps javax.cache:cache-api + ehcache + spring-boot-starter-cache

http://www.ehcache.org/


Front pacakgé avec maven
=> voir exemple
=> on a un packé généré avec bower/npm ou autre
=> on le package avec maven puis on peut le référencer comme dépendance

C'est bien, mais pour bénéficier du live reload, ajouter dans le profile dev:

Utiliser spring.resources.static-locations (voir exemple) pour indiquer à dev-tools de monitorer aussi les répertoires de la partie cliente. 'spring.devtools.restart.additional-paths' indique de ne pas redémarrer.



Profile
Au démarrage vérifier le message:
INFO 4074 --- [  restartedMain] demo.config.Application                  : No active profile set, falling back to default profiles: default

On peut modifier la config de launch d'idea pour spécifier le profile : dev par exemple


Réduire ce que l'on renvoie dans une requête REST au client pour ne donner que le minimum.
=> jackson JsonView

Voir l'exemple. Pour un objet renvoyé: on sélectionne dans le controlleur la vue json, et on annote dans la classe de l'objet les champs à renvoyer pour cette classe.

Comme on renvoie du Json, ce serait bien de compresser la sortie:
server.compression.enabled = true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain


ResponseEntity:
pour renvoyer le body + des headers avec un etag pour indiquer le cache controle
pas la peine de laisser l'annotation @ResponseEntity car il peut le déduire du type renvoyer



Mais on continue à renvoyer des .js no minifiés, etc.

On va ajouter une étape de minification du webjars:
 - voir gulp.js
 


Cache agressif en prod:
  - spring.resources.chain.strategy.content.enabled=true
=> les fichiers sont suffixés avec un tag pour chaque version et le client ne rechargera pas si le nom ne change pas (~pas de timeout, ou timeout très long ?).


Typeahead JS pour l'autocompletion :
https://twitter.github.io/typeahead.js/



Configuration properties
http://blog.codeleak.pl/2014/09/using-configurationproperties-in-spring.html
https://dzone.com/articles/spring-boot-configurationproperties-1



CrossOrigin: see https://spring.io/guides/gs/rest-service-cors/



Jar executable as a script for linux prod integration
=> mvn plugin config: executable = true

ensuite on peut l'intégrer comme un service de linux

http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/deployment-install.html#deployment-service

jar executable:
 - http://docs.spring.io/spring-boot/docs/1.3.3.RELEASE/maven-plugin/repackage-mojo.html
 - http://docs.spring.io/spring-boot/docs/1.3.3.RELEASE/maven-plugin/repackage-mojo.html#executable
 - https://hbytes.wordpress.com/2015/10/22/spring-boots-fully-executable-jars/


Ajout de spring security: actuator only dispo pour admin
On peut aussi activer actuator sur une ip/port différent
https://docs.spring.io/spring-boot/docs/current/reference/html/howto-actuator.html
https://github.com/spring-projects/spring-boot/issues/2653

 

